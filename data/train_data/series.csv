"input","Expected","difficulty_level","answers"
"Series.index","What is the role of the `index` in the Series class in Pandas?","Medium","The index (axis labels) of the Series provides the labels for the data elements. It's used to align data when performing operations between Series and DataFrames."
"Series.array","What is the `array` attribute in a Pandas Series, and how does it differ from `values`?","Medium","The `array` attribute provides access to the underlying data as an ExtensionArray. It supports a more flexible and efficient memory layout compared to `values`, especially for categorical and datetime types."
"Series.values","How does the `values` attribute return the data in a Pandas Series?","Easy","The `values` attribute returns the data of the Series as a NumPy ndarray. For example, `series.values` gives an array-like object that can be used for mathematical operations."
"Series.dtype","What does the `dtype` attribute in a Pandas Series return?","Medium","The `dtype` attribute returns the data type of the Series, which is a numpy dtype object indicating the type of the elements (e.g., `int64`, `float64`, `datetime64`)."
"Series.shape","What does the `shape` attribute of a Series in Pandas return?","Medium","The `shape` attribute returns a tuple representing the dimensions of the underlying data. For a Series, it returns a single value tuple indicating the number of elements."
"Series.nbytes","What is the purpose of the `nbytes` attribute in a Pandas Series?","Medium","The `nbytes` attribute returns the number of bytes used to store the data in the Series. This can help in understanding memory usage, especially with large datasets."
"Series.ndim","What does the `ndim` attribute indicate about a Series in Pandas?","Easy","The `ndim` attribute returns the number of dimensions of the Series. Since a Series is essentially a one-dimensional object, it always returns `1`."
"Series.size","What is the purpose of the `size` attribute in a Pandas Series?","Easy","The `size` attribute returns the total number of elements in the Series. It's equivalent to the length of the Series."
"Series.T","What does the `T` attribute do in a Pandas Series?","Medium","The `T` attribute returns the transpose of the Series. Since Series are one-dimensional, transposing a Series results in the same Series (self-transpose)."
"Series.memory_usage([index, deep])","What does the `memory_usage` method return in a Pandas Series?","Medium","The `memory_usage` method returns the memory usage of the Series. It can optionally include the memory usage of the index (`index=True`) and whether deep introspection is required to account for object types (`deep=True`)."
"Series.hasnans","How does the `hasnans` attribute help identify missing values in a Series?","Easy","The `hasnans` attribute returns `True` if there are any missing (NaN) values in the Series. This is useful for identifying incomplete data."
"Series.empty","What does the `empty` attribute indicate about a Pandas Series?","Easy","The `empty` attribute checks if the Series is empty, i.e., contains no elements. It returns `True` if the Series has no elements, otherwise `False`."
"Series.dtypes","What is the `dtypes` attribute used for in a Pandas Series?","Medium","The `dtypes` attribute returns the data type of each element in the Series. It helps you understand the type of data the Series holds (e.g., `float64`, `datetime64`)."
"Series.name","What is the purpose of the `name` attribute in a Pandas Series?","Medium","The `name` attribute assigns or retrieves the name of the Series. This can be helpful when working with multiple Series and keeping track of their purpose or identity."
"Series.flags","What are the properties associated with a Pandas Series in `flags`?","Hard","The `flags` attribute contains various flags indicating whether the Series has specific properties like `copy`, `writeable`, or `mutable`. These properties help manage the behavior of the Series during operations."
"Series.set_flags(*[, copy, ...])","What does the `set_flags` method do in a Pandas Series?","Hard","The `set_flags` method is used to set or update the flags for a Series. It allows you to change the behavior of the Series, such as making it read-only or mutable."
"Series.add(other[, level, fill_value, axis])","What does the `add` method do in a Pandas Series?","Medium","The `add` method performs element-wise addition between the Series and another Series or scalar. You can specify a `fill_value` to handle missing data."
"Series.sub(other[, level, fill_value, axis])","What is the function of the `sub` method in a Pandas Series?","Medium","The `sub` method performs element-wise subtraction between the Series and another Series or scalar. It can handle missing values with a `fill_value`."
"Series.mul(other[, level, fill_value, axis])","How does the `mul` method operate in a Pandas Series?","Medium","The `mul` method performs element-wise multiplication between the Series and another Series or scalar. It's useful for mathematical operations on numerical data."
"Series.div(other[, level, fill_value, axis])","What is the purpose of the `div` method in a Pandas Series?","Medium","The `div` method performs element-wise floating-point division between the Series and another Series or scalar, with options to handle missing values (`fill_value`)."
"Series.truediv(other[, level, fill_value, axis])","How does `truediv` perform floating division in a Pandas Series?","Medium","The `truediv` method performs true division (floating point) between the Series and another Series or scalar. It handles missing values using `fill_value`."
"Series.floordiv(other[, level, fill_value, axis])","What does the `floordiv` method do in a Pandas Series?","Medium","The `floordiv` method performs element-wise integer (floor) division, returning the quotient with the fractional part truncated."
"Series.mod(other[, level, fill_value, axis])","What is the purpose of the `mod` method in a Pandas Series?","Medium","The `mod` method performs element-wise modulo (remainder) operation between the Series and another Series or scalar."
"Series.pow(other[, level, fill_value, axis])","How does the `pow` method work in a Pandas Series?","Medium","The `pow` method computes the element-wise exponential power of the Series and another Series or scalar. It's useful for power-based operations on numerical data."
"Series.radd(other[, level, fill_value, axis])","What does the `radd` method do in a Pandas Series?","Medium","The `radd` method is the reverse of the `add` method. It performs addition of the Series and another object, supporting element-wise operations."
"Series.rsub(other[, level, fill_value, axis])","What is the function of the `rsub` method in a Pandas Series?","Medium","The `rsub` method performs element-wise subtraction where the Series is on the right-hand side of the operation."
"Series.rmul(other[, level, fill_value, axis])","What does the `rmul` method do in a Pandas Series?","Medium","The `rmul` method performs element-wise multiplication with the Series on the right-hand side of the operation."
"Series.rdiv(other[, level, fill_value, axis])","What is the role of the `rdiv` method in a Pandas Series?","Medium","The `rdiv` method performs element-wise division where the Series is on the right-hand side of the division operation."
"Series.rtruediv(other[, level, fill_value, axis])","What does the `rtruediv` method do in a Pandas Series?","Medium","The `rtruediv` method performs element-wise true division where the Series is on the right-hand side."
"Series.rfloordiv(other[, level, fill_value, ...])","How does the `rfloordiv` method work in a Pandas Series?","Medium","The `rfloordiv` method performs element-wise floor division, where the Series is on the right-hand side of the division."
"Series.rmod(other[, level, fill_value, axis])","What is the `rmod` method used for in a Pandas Series?","Medium","The `rmod` method performs element-wise modulo operation, with the Series on the right-hand side."
"Series.rpow(other[, level, fill_value, axis])","How does the `rpow` method perform exponential power in a Pandas Series?","Medium","The `rpow` method calculates element-wise exponential power, where the Series is on the right-hand side."
"Series.combine(other, func[, fill_value])","What does the `combine` method do in a Pandas Series?","Hard","The `combine` method combines two Series according to a function, allowing complex operations between the Series and a scalar."
"Series.combine_first(other)","What is the purpose of the `combine_first` method in a Pandas Series?","Hard","The `combine_first` method updates missing values (NaNs) in a Series with corresponding values from another Series."
"Series.round([decimals])","How does the `round` method work in a Pandas Series?","Easy","The `round` method rounds each element in the Series to a specified number of decimals. For example, `series.round(2)` rounds the elements to two decimal places."
"Series.lt(other[, level, fill_value, axis])","What does the `lt` method check in a Pandas Series?","Easy","The `lt` method checks if each element in the Series is less than the corresponding element in another Series or scalar (element-wise)."
"Series.gt(other[, level, fill_value, axis])","How does the `gt` method work in a Pandas Series?","Easy","The `gt` method checks if each element in the Series is greater than the corresponding element in another Series or scalar (element-wise)."
"Series.le(other[, level, fill_value, axis])","What is the purpose of the `le` method in a Pandas Series?","Easy","The `le` method checks if each element in the Series is less than or equal to the corresponding element in another Series or scalar."
"Series.ge(other[, level, fill_value, axis])","How does the `ge` method work in a Pandas Series?","Easy","The `ge` method checks if each element in the Series is greater than or equal to the corresponding element in another Series or scalar."
"Series.ne(other[, level, fill_value, axis])","What is the `ne` method used for in a Pandas Series?","Easy","The `ne` method checks if each element in the Series is not equal to the corresponding element in another Series or scalar."
"Series.eq(other[, level, fill_value, axis])","What does the `eq` method check in a Pandas Series?","Easy","The `eq` method checks if each element in the Series is equal to the corresponding element in another Series or scalar."
"Series.product([axis, skipna, numeric_only, ...])","What does the `product` method compute in a Pandas Series?","Medium","The `product` method computes the product of the values in the Series over the specified axis. By default, it operates over all elements."
"Series.dot(other)","What is the purpose of the `dot` method in a Pandas Series?","Medium","The `dot` method computes the dot product between the Series and another Series or DataFrame column. This is commonly used for linear algebra operations."
"Series.cat.categories","What does the `categories` attribute return in a Pandas Categorical?","Medium","The `categories` attribute returns the unique categories of a Pandas Categorical object. This is important when working with categorical data types."
"Series.cat.ordered","What does the `ordered` attribute indicate in a Pandas Categorical?","Medium","The `ordered` attribute indicates whether the categories in a categorical are ordered. This is used for ordinal data types."
"Series.cat.codes","What does the `codes` attribute return in a Pandas Categorical?","Medium","The `codes` attribute returns the integer representation (codes) of the categories, which can be used for analysis and computation."
"Series.cat.rename_categories(*args, **kwargs)","What does the `rename_categories` method do in a Pandas Categorical?","Medium","The `rename_categories` method allows you to rename the categories in a Categorical object. This is useful when re-labeling data."
"Series.cat.reorder_categories(*args, **kwargs)","How does the `reorder_categories` method work in a Pandas Categorical?","Medium","The `reorder_categories` method allows you to reorder the categories in a Categorical object, which is important when managing the sequence of categorical levels."
"Series.cat.add_categories(*args, **kwargs)","What does the `add_categories` method do in a Pandas Categorical?","Medium","The `add_categories` method allows you to add new categories to an existing Categorical object. This is useful when expanding categorical values."
"Series.cat.remove_categories(*args, **kwargs)","What does the `remove_categories` method do in a Pandas Categorical?","Medium","The `remove_categories` method allows you to remove one or more categories from a Categorical object, helping clean up unused values."
"Series.cat.remove_unused_categories(*args, ...)","What does the `remove_unused_categories` method do in a Pandas Categorical?","Medium","The `remove_unused_categories` method removes any categories that are not used in the data, helping reduce memory usage."
"Series.cat.set_categories(*args, **kwargs)","What is the purpose of the `set_categories` method in a Pandas Categorical?","Medium","The `set_categories` method allows you to replace the categories in a Categorical object with new ones."
"Series.cat.as_ordered(*args, **kwargs)","What does the `as_ordered` method do in a Pandas Categorical?","Medium","The `as_ordered` method converts a Categorical object to an ordered Categorical, where categories have a meaningful order."
"Series.cat.as_unordered(*args, **kwargs)","What does the `as_unordered` method do in a Pandas Categorical?","Medium","The `as_unordered` method converts a Categorical object back to an unordered type, where the categories have no specific ordering."

"Series.compare(other[, align_axis, ...])","Compare two Series and show the differences, including which elements are not equal.","Medium","The `compare` method allows you to compare two Series and identify which values differ. It returns a DataFrame that highlights the changes. Example: `s1.compare(s2)` shows which elements in `s1` are different from `s2`."
"Series.update(other)","Modify Series in place using values from passed Series.","Medium","The `update` method modifies the Series in place, replacing its values with those from another Series where they align. Example: `s1.update(s2)` updates `s1` with values from `s2` where both have matching indices."
"Series.astype(dtype[, copy, errors])","Cast a pandas object to a specified dtype dtype.","Medium","The `astype` method casts a Series or DataFrame to the specified dtype, allowing type conversions. Example: `s1.astype(int)` converts a Series `s1` of floats to integers."
"Series.convert_dtypes([infer_objects, ...])","Convert columns to the best possible dtypes using dtypes supporting pd.NA.","Medium","The `convert_dtypes` method automatically selects the best possible data types for each column, taking into account `pd.NA` support. Example: `df.convert_dtypes()` ensures optimal data types in `df`."
"Series.infer_objects([copy])","Attempt to infer better dtypes for object columns.","Medium","The `infer_objects` method tries to infer better data types for object columns in a DataFrame. For instance, `df.infer_objects()` might convert an object column of strings to categorical if appropriate."
"Series.copy([deep])","Make a copy of this object's indices and data.","Medium","The `copy` method creates a deep or shallow copy of the Series or DataFrame. Example: `s1_copy = s1.copy()` creates an independent copy of `s1`."
"Series.bool()","(DEPRECATED) Return the bool of a single element Series or DataFrame.","Hard","The `bool()` method is deprecated and used to return a boolean value of a single-element Series. Example: If `s1 = pd.Series([True])`, `s1.bool()` would return `True`."
"Series.to_numpy([dtype, copy, na_value])","A NumPy ndarray representing the values in this Series or Index.","Medium","The `to_numpy` method converts a Series into a NumPy ndarray. Example: `s1.to_numpy()` converts the Series `s1` into a NumPy array."
"Series.to_period([freq, copy])","Convert Series from DatetimeIndex to PeriodIndex.","Medium","The `to_period` method converts a Series of `datetime` objects to a PeriodIndex. Example: `s1.to_period('M')` converts timestamps in `s1` to monthly periods."
"Series.to_timestamp([freq, how, copy])","Cast to DatetimeIndex of Timestamps, at beginning of period.","Medium","The `to_timestamp` method converts a PeriodIndex to Timestamps. Example: `s1.to_timestamp()` converts period data to timestamp data."
"Series.to_list()","Return a list of the values.","Easy","The `to_list` method converts the Series into a standard Python list. Example: `s1.to_list()` returns the values of Series `s1` as a list."
"Series.__array__([dtype, copy])","Return the values as a NumPy array.","Medium","The `__array__` method returns the underlying data as a NumPy array. Example: `s1.__array__()` returns the values in `s1` as a NumPy ndarray."
"Series.str","alias of StringMethods","Medium","Access string methods for Series containing strings. Example: `s1.str.upper()` converts all string values in Series `s1` to uppercase."
"Series.cat","alias of CategoricalAccessor","Medium","Access methods and properties specific to categorical data types. Example: `s1.cat.codes` returns the categorical codes for Series `s1`."
"Series.dt","alias of CombinedDatetimelikeProperties","Medium","Access methods and properties for datetime-like values. Example: `s1.dt.year` extracts the year from datetime values in Series `s1`."
"Series.sparse","alias of SparseAccessor","Medium","Access methods for Series containing sparse data. Example: `s1.sparse.to_dense()` converts a sparse Series `s1` to a dense format."
"DataFrame.sparse","alias of SparseFrameAccessor","Medium","Access methods for sparse data in DataFrames. Example: `df.sparse.to_dense()` converts a sparse DataFrame `df` to a dense format."
"Index.str","alias of StringMethods","Medium","Access string methods for Index objects containing strings. Example: `index.str.contains('abc')` checks if elements in `index` contain 'abc'."
"Series.dt.date","Returns numpy array of python datetime.date objects.","Medium","The `dt.date` method extracts the date part of a datetime Series. Example: `s1.dt.date` returns a Series of `datetime.date` objects from `s1`."
"Series.dt.time","Returns numpy array of datetime.time objects.","Medium","The `dt.time` method extracts the time part from datetime values. Example: `s1.dt.time` returns the time portion of each datetime value in `s1`."
"Series.dt.timetz","Returns numpy array of datetime.time objects with timezones.","Medium","The `dt.timetz` method extracts the time including timezone information. Example: `s1.dt.timetz` returns `datetime.time` with timezone for each value in `s1`."
"Series.dt.year","The year of the datetime.","Easy","Extracts the year from the datetime values. Example: `s1.dt.year` returns the year part of each datetime value in `s1`."
"Series.dt.month","The month as January=1, December=12.","Easy","Extracts the month from datetime values. Example: `s1.dt.month` returns the month (1-12) for each date in `s1`."
"Series.dt.day","The day of the datetime.","Easy","Extracts the day of the month from datetime values. Example: `s1.dt.day` returns the day (1-31) from each datetime in `s1`."
"Series.dt.hour","The hours of the datetime.","Easy","Extracts the hour part from datetime values. Example: `s1.dt.hour` returns the hour (0-23) from each datetime in `s1`."
"Series.dt.minute","The minutes of the datetime.","Easy","Extracts the minute part from datetime values. Example: `s1.dt.minute` returns the minute (0-59) from each datetime in `s1`."
"Series.dt.second","The seconds of the datetime.","Easy","Extracts the second part from datetime values. Example: `s1.dt.second` returns the seconds (0-59) from each datetime in `s1`."
"Series.dt.microsecond","The microseconds of the datetime.","Medium","Extracts the microseconds part from datetime values. Example: `s1.dt.microsecond` returns the microseconds (0-999999) for each datetime in `s1`."
"Series.dt.nanosecond","The nanoseconds of the datetime.","Medium","Extracts the nanoseconds part from datetime values. Example: `s1.dt.nanosecond` returns nanoseconds (0-999999999) from each datetime in `s1`."
"Series.dt.dayofweek","The day of the week with Monday=0, Sunday=6.","Easy","Extracts the weekday from datetime values. Example: `s1.dt.dayofweek` returns integers representing weekdays (Monday=0, Sunday=6)."
"Series.dt.day_of_week","The day of the week with Monday=0, Sunday=6.","Easy","Same as `dayofweek`, but an alternative name. Example: `s1.dt.day_of_week` returns the weekday as an integer."
"Series.dt.weekday","The day of the week with Monday=0, Sunday=6.","Easy","Extracts the weekday value, same as `dayofweek`. Example: `s1.dt.weekday` gives the weekday number for each datetime."
"Series.dt.dayofyear","The ordinal day of the year.","Medium","Extracts the day of the year from datetime values. Example: `s1.dt.dayofyear` returns an integer (1-366) for each datetime in `s1`."
"Series.dt.day_of_year","The ordinal day of the year.","Medium","Alternative name for `dayofyear`. Example: `s1.dt.day_of_year` gives the day number for each datetime in `s1`."
"Series.dt.days_in_month","The number of days in the month.","Medium","Returns the number of days in the month for each datetime. Example: `s1.dt.days_in_month` returns the number of days in the month for each entry in `s1`."
"Series.dt.quarter","The quarter of the date.","Medium","Returns the quarter (1-4) for each datetime value. Example: `s1.dt.quarter` returns the quarter of the year for each datetime."
"Series.dt.is_month_start","Indicates whether the date is the first day of the month.","Medium","Checks if each datetime is the first day of the month. Example: `s1.dt.is_month_start` returns a boolean Series."
"Series.dt.is_month_end","Indicates whether the date is the last day of the month.","Medium","Checks if each datetime is the last day of the month. Example: `s1.dt.is_month_end` returns a boolean Series."
"Series.dt.is_quarter_start","Indicator for whether the date is the first day of a quarter.","Medium","Checks if each datetime is the start of a quarter. Example: `s1.dt.is_quarter_start` returns a boolean Series."
"Series.dt.is_quarter_end","Indicator for whether the date is the last day of a quarter.","Medium","Checks if each datetime is the end of a quarter. Example: `s1.dt.is_quarter_end` returns a boolean Series."
"Series.dt.is_year_start","Indicate whether the date is the first day of a year.","Medium","Checks if each datetime is the first day of the year. Example: `s1.dt.is_year_start` returns a boolean Series."
"Series.dt.is_year_end","Indicate whether the date is the last day of the year.","Medium","Checks if each datetime is the last day of the year. Example: `s1.dt.is_year_end` returns a boolean Series."
"Series.dt.is_leap_year","Boolean indicator if the date belongs to a leap year.","Medium","Indicates whether the datetime value is in a leap year. Example: `s1.dt.is_leap_year` returns a boolean Series."
"Series.dt.daysinmonth","The number of days in the month.","Medium","Returns the number of days in the month for each datetime value. Example: `s1.dt.daysinmonth` gives the number of days in each datetime's month."
"Series.dt.days_in_month","The number of days in the month.","Medium","Alternative name for `daysinmonth`. Example: `s1.dt.days_in_month` gives the number of days in each datetime's month."
"Series.dt.tz","Return the timezone.","Medium","Returns the timezone for each datetime value. Example: `s1.dt.tz` returns the timezone of each datetime in `s1`."
"Series.dt.freq","Return the frequency object for this PeriodArray.","Medium","Returns the frequency object for a PeriodArray. Example: `s1.dt.freq` provides the frequency of the PeriodArray."
"Series.dt.unit","Datetime unit, like 'ns', 'us', etc.","Medium","Returns the datetime unit for values in the Series. Example: `s1.dt.unit` returns the unit of the datetime values."
"Series.dt.isocalendar()","Calculate year, week, and day according to the ISO 8601 standard.","Hard","Returns year, week number, and day of the week according to the ISO 8601 standard. Example: `s1.dt.isocalendar()` returns a DataFrame with year, week, and day."
"Series.dt.to_period(*args, **kwargs)","Cast to PeriodArray/PeriodIndex at a particular frequency.","Medium","Converts Series of datetimes to a PeriodArray with the specified frequency. Example: `s1.dt.to_period('Q')` converts to quarterly periods."
"Series.dt.to_pydatetime()","(DEPRECATED) Return the data as an array of datetime.datetime objects.","Hard","Deprecated method that converts Series to a native Python `datetime` object. Example: `s1.dt.to_pydatetime()` returns native datetime objects."
"Series.dt.tz_localize(*args, **kwargs)","Localize tz-naive Datetime Array/Index to tz-aware Datetime Array/Index.","Hard","Converts naive datetime objects to timezone-aware. Example: `s1.dt.tz_localize('UTC')` localizes `s1` to UTC."
"Series.dt.tz_convert(*args, **kwargs)","Convert tz-aware Datetime Array/Index from one time zone to another.","Hard","Converts datetime values from one timezone to another. Example: `s1.dt.tz_convert('US/Pacific')` converts the timezone of `s1` to Pacific Time."
"Series.dt.normalize(*args, **kwargs)","Convert times to midnight.","Medium","Normalizes datetime values by setting the time to midnight. Example: `s1.dt.normalize()` changes times to 00:00:00."
"Series.dt.strftime(*args, **kwargs)","Convert to Index using specified date_format.","Hard","Formats datetime values as strings based on the specified format. Example: `s1.dt.strftime('%Y-%m-%d')` formats `s1`'s datetime values into strings like '2025-01-01'."
"Series.dt.round(*args, **kwargs)","Perform round operation on the data to the specified freq.","Hard","Rounds datetime values to the nearest specified frequency. Example: `s1.dt.round('H')` rounds datetime values to the nearest hour."
"Series.dt.floor(*args, **kwargs)","Perform floor operation on the data to the specified freq.","Hard","Floors datetime values to the nearest specified frequency. Example: `s1.dt.floor('D')` floors datetime values to the start of the day."
"Series.dt.ceil(*args, **kwargs)","Perform ceil operation on the data to the specified freq.","Hard","Ceils datetime values to the nearest specified frequency. Example: `s1.dt.ceil('D')` ceils datetime values to the end of the day."
"Series.dt.month_name(*args, **kwargs)","Return the month names with specified locale.","Medium","Returns the month names, optionally localized. Example: `s1.dt.month_name()` returns month names like 'January' for each datetime in `s1`."
"Series.dt.day_name(*args, **kwargs)","Return the day names with specified locale.","Medium","Returns the day names, optionally localized. Example: `s1.dt.day_name()` returns day names like 'Monday' for each datetime in `s1`."
"Series.dt.as_unit(*args, **kwargs)","Convert datetime to a different unit.","Hard","Converts datetime values to a different unit, such as nanoseconds to seconds. Example: `s1.dt.as_unit('s')` converts to seconds."
"Series.dt.qyear","Returns the quarter-year value.","Hard","Extracts the quarter-year (e.g., Q1-2025) for each datetime value. Example: `s1.dt.qyear` returns values like 'Q1-2025'."
"Series.dt.start_time","Get the Timestamp for the start of the period.","Hard","Returns the start time of the period for each datetime. Example: `s1.dt.start_time` returns the start of the period for each entry."
"Series.dt.end_time","Get the Timestamp for the end of the period.","Hard","Returns the end time of the period for each datetime. Example: `s1.dt.end_time` returns the end of the period for each datetime."
"Series.dt.days","Number of days for each element.","Medium","Extracts the number of days from timedelta values. Example: `s1.dt.days` returns the number of days in each timedelta value."
"Series.dt.seconds","Number of seconds (>= 0 and less than 1 day) for each element.","Medium","Extracts the number of seconds from timedelta values. Example: `s1.dt.seconds` returns the seconds (0-86399) for each timedelta in `s1`."
"Series.dt.microseconds","Number of microseconds (>= 0 and less than 1 second) for each element.","Medium","Extracts the number of microseconds from timedelta values. Example: `s1.dt.microseconds` returns the microseconds (0-999999) for each timedelta in `s1`."
"Series.dt.nanoseconds","Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.","Medium","Extracts the number of nanoseconds from timedelta values. Example: `s1.dt.nanoseconds` returns the nanoseconds for each timedelta in `s1`."
"Series.dt.components","Return a Dataframe of the components of the Timedeltas.","Hard","Returns a DataFrame with individual components (days, seconds, microseconds) of each timedelta value. Example: `s1.dt.components` gives a DataFrame with timedelta components."
"Series.dt.unit","Return the unit of the timedelta.","Medium","Returns the unit (e.g., 'days', 'seconds') of the timedelta values. Example: `s1.dt.unit` returns the unit of timedelta values like 'days'."
"Series.dt.to_pytimedelta()","Return an array of native datetime.timedelta objects.","Hard","Converts Series of timedeltas to native `datetime.timedelta` objects. Example: `s1.dt.to_pytimedelta()` returns the timedelta values as Python objects."
"Series.dt.total_seconds(*args, **kwargs)","Return total duration of each element expressed in seconds.","Hard","Returns the total number of seconds in each timedelta. Example: `s1.dt.total_seconds()` gives the total seconds for each timedelta in `s1`."
"Series.dt.as_unit(*args, **kwargs)","Convert timedeltas to a different unit.","Hard","Converts timedelta values to another unit, like milliseconds or seconds. Example: `s1.dt.as_unit('s')` converts timedelta values to seconds."


"Series.abs()","What does the Series.abs() method return?","Easy","Returns absolute values of all numeric elements in the Series."
"Series.all([axis, bool_only, skipna])","What does the Series.all() method check?","Medium","Checks if all elements in the Series are True along the specified axis."
"Series.any([axis, bool_only, skipna])","What does the Series.any() method check?","Medium","Checks if any element in the Series is True along the specified axis."
"Series.autocorr([lag])","What does the Series.autocorr() method compute?","Hard","Calculates the autocorrelation of the Series with a given lag value."
"Series.between(left, right[, inclusive])","What does the Series.between() method return?","Medium","Returns True for elements that are within a specified range (inclusive or exclusive)."
"Series.clip([lower, upper, axis, inplace])","What does the Series.clip() method do?","Medium","Clips the values in the Series between a lower and upper bound."
"Series.corr(other[, method, min_periods])","What does the Series.corr() method compute?","Medium","Computes the correlation coefficient between the Series and another Series."
"Series.count()","What does the Series.count() method return?","Easy","Returns the count of non-null elements in the Series."
"Series.cov(other[, min_periods, ddof])","What does the Series.cov() method compute?","Medium","Computes the covariance between the Series and another Series."
"Series.cummax([axis, skipna])","What does the Series.cummax() method return?","Medium","Calculates the cumulative maximum of values along the specified axis."
"Series.cummin([axis, skipna])","What does the Series.cummin() method return?","Medium","Calculates the cumulative minimum of values along the specified axis."
"Series.cumprod([axis, skipna])","What does the Series.cumprod() method return?","Medium","Calculates the cumulative product of values along the specified axis."
"Series.cumsum([axis, skipna])","What does the Series.cumsum() method return?","Medium","Calculates the cumulative sum of values along the specified axis."
"Series.describe([percentiles, include, exclude])","What does the Series.describe() method generate?","Easy","Generates summary statistics such as mean, median, min, max, etc."
"Series.diff([periods])","What does the Series.diff() method compute?","Medium","Computes the difference between the current and previous elements in the Series."
"Series.factorize([sort, use_na_sentinel])","What does the Series.factorize() method do?","Hard","Encodes categorical data as numeric values."
"Series.kurt([axis, skipna, numeric_only])","What does the Series.kurt() method calculate?","Medium","Calculates the kurtosis (measure of tails) of the distribution."
"Series.max([axis, skipna, numeric_only])","What does the Series.max() method return?","Easy","Returns the maximum value in the Series along the specified axis."
"Series.mean([axis, skipna, numeric_only])","What does the Series.mean() method return?","Easy","Returns the mean (average) of the Series values."
"Series.median([axis, skipna, numeric_only])","What does the Series.median() method return?","Easy","Returns the median (middle) value of the Series."
"Series.min([axis, skipna, numeric_only])","What does the Series.min() method return?","Easy","Returns the minimum value in the Series along the specified axis."
"Series.mode([dropna])","What does the Series.mode() method return?","Medium","Returns the most frequent value(s) in the Series."
"Series.nlargest([n, keep])","What does the Series.nlargest() method return?","Medium","Returns the largest 'n' values in the Series."
"Series.nsmallest([n, keep])","What does the Series.nsmallest() method return?","Medium","Returns the smallest 'n' values in the Series."
"Series.pct_change([periods, fill_method, ...])","What does the Series.pct_change() method compute?","Medium","Calculates the percentage change between elements in the Series."
"Series.prod([axis, skipna, numeric_only, ...])","What does the Series.prod() method compute?","Medium","Calculates the product of all elements in the Series along the specified axis."
"Series.quantile([q, interpolation])","What does the Series.quantile() method return?","Medium","Returns the value at the specified quantile (e.g., 0.5 for median)."
"Series.rank([axis, method, numeric_only, ...])","What does the Series.rank() method do?","Medium","Ranks the elements in the Series along the specified axis."
"Series.sem([axis, skipna, ddof, numeric_only])","What does the Series.sem() method compute?","Hard","Computes the standard error of the mean, excluding missing values."
"Series.skew([axis, skipna, numeric_only])","What does the Series.skew() method compute?","Hard","Calculates the skewness (measure of asymmetry) of the distribution."
"Series.std([axis, skipna, ddof, numeric_only])","What does the Series.std() method compute?","Easy","Calculates the standard deviation (spread of values) of the Series."
"Series.sum([axis, skipna, numeric_only, ...])","What does the Series.sum() method return?","Easy","Returns the sum of all elements in the Series along the specified axis."
"Series.var([axis, skipna, ddof, numeric_only])","What does the Series.var() method compute?","Easy","Calculates the variance (measure of spread) of the Series values."
"Series.kurtosis([axis, skipna, numeric_only])","What does the Series.kurtosis() method return?","Medium","Same as `kurt`, but an alternative name."
"Series.unique()","What does the Series.unique() method return?","Medium","Returns an array of unique values in the Series."
"Series.nunique([dropna])","What does the Series.nunique() method return?","Easy","Returns the count of distinct values in the Series."
"Series.is_unique","What does the Series.is_unique attribute check?","Easy","Checks if all values in the Series are unique."
"Series.is_monotonic_increasing","What does the Series.is_monotonic_increasing attribute check?","Medium","Checks if the values in the Series are sorted in increasing order."
"Series.is_monotonic_decreasing","What does the Series.is_monotonic_decreasing attribute check?","Medium","Checks if the values in the Series are sorted in decreasing order."
"Series.value_counts([normalize, sort, ...])","What does the Series.value_counts() method return?","Medium","Returns the count of occurrences of each unique value in the Series."
"Flags(obj, *, allows_duplicate_labels)","What does the Flags() method do?","Medium","Applies flags to a pandas object, allowing the tracking of properties like duplicate labels."
"Series.attrs","What does the Series.attrs attribute hold?","Medium","A dictionary for storing global metadata associated with the Series."
"Series.attrs (Warning)","Why is the Series.attrs feature considered experimental?","Hard","Indicates that the `attrs` feature for storing metadata is experimental and could change without prior notice."
"Series.apply(func[, convert_dtype, args, by_row])","What does the Series.apply() method do?","Medium","Applies a function to each element in the Series, optionally converting the dtype and passing additional arguments."
"Series.agg([func, axis])","What does the Series.agg() method do?","Medium","Performs aggregation operations like sum, mean, etc., on the Series along the specified axis."
"Series.aggregate([func, axis])","What does the Series.aggregate() method do?","Medium","Similar to `agg`, applies one or more aggregation functions to the Series."
"Series.transform(func[, axis])","What does the Series.transform() method do?","Medium","Applies a function to the Series, transforming each element while retaining the original axis shape."
"Series.map(arg[, na_action])","What does the Series.map() method do?","Medium","Maps values in the Series to a new set of values using a dictionary or a function."
"Series.groupby([by, axis, level, as_index, ...])","What does the Series.groupby() method do?","Medium","Groups the Series by one or more columns, allowing for aggregation and other operations."
"Series.rolling(window[, min_periods, ...])","What does the Series.rolling() method provide?","Medium","Applies rolling window calculations, like moving averages, over the Series."
"Series.expanding([min_periods, axis, method])","What does the Series.expanding() method do?","Medium","Performs expanding window calculations, where the window size increases with each step."
"Series.ewm([com, span, halflife, alpha, ...])","What does the Series.ewm() method provide?","Hard","Applies exponentially weighted functions to the Series to give more weight to recent data points."
"Series.pipe(func, *args, **kwargs)","What does the Series.pipe() method do?","Medium","Applies a function to the Series or DataFrame, enabling chaining of multiple operations."

"Series.get(key[, default])","What does the Series.get() method do?","Medium","Fetches the value for a specific key (index or label) from the Series, with an optional default value if the key doesn't exist."
"Series.at","What does the Series.at method access?","Easy","Accesses a single value from the Series using a label-based index."
"Series.iat","What does the Series.iat method access?","Easy","Accesses a single value from the Series using integer-based index positions."
"Series.loc","What does the Series.loc method do?","Medium","Allows label-based indexing to retrieve specific rows and columns from the Series."
"Series.iloc","What does the Series.iloc method do?","Medium","Used to index the Series using integer positions (deprecated in favor of `iloc`)."
"Series.__iter__()","What does the Series.__iter__() method return?","Easy","Returns an iterator for the Series, allowing iteration over its elements."
"Series.items()","What does the Series.items() method do?","Medium","Returns an iterator that yields (index, value) pairs from the Series."
"Series.keys()","What does the Series.keys() method return?","Easy","Returns the index of the Series as an alias."
"Series.pop(item)","What does the Series.pop() method do?","Medium","Removes and returns the specified item from the Series."
"Series.item()","What does the Series.item() method return?","Medium","Returns the first value of the Series as a scalar (python object)."
"Series.xs(key[, axis, level, drop_level])","What does the Series.xs() method return?","Medium","Returns a cross-section of the data using a specified key, allowing access to specific levels or axes."

"Series.list.flatten()","What does the Series.list.flatten() method do?","Medium","Flattens the list values in the Series, converting nested lists into a single list."
"Series.list.len()","What does the Series.list.len() method do?","Easy","Returns the length of each list in the Series."
"Series.list.__getitem__(key)","What does the Series.list.__getitem__(key) method do?","Medium","Indexes or slices the lists in the Series using the specified key."

"Series.backfill(*[, axis, inplace, limit, ...])","What does the Series.backfill() method do?","Medium","Fills missing (NA/NaN) values by using the next valid observation to fill the gap. (Deprecated)"
"Series.bfill(*[, axis, inplace, limit, ...])","What does the Series.bfill() method do?","Medium","Fills missing (NA/NaN) values by using the next valid observation to fill the gap."
"Series.dropna(*[, axis, inplace, how, ...])","What does the Series.dropna() method do?","Easy","Returns a new Series with missing values (NA/NaN) removed."
"Series.ffill(*[, axis, inplace, limit, ...])","What does the Series.ffill() method do?","Medium","Fills missing (NA/NaN) values by propagating the last valid observation forward to the next valid one."
"Series.fillna([value, method, axis, ...])","What does the Series.fillna() method do?","Medium","Fills missing (NA/NaN) values using the specified value or method."
"Series.interpolate([method, axis, limit, ...])","What does the Series.interpolate() method do?","Hard","Fills missing (NA/NaN) values using an interpolation method, estimating values based on surrounding data."
"Series.isna()","What does the Series.isna() method do?","Easy","Detects missing (NA/NaN) values in the Series."
"Series.isnull()","What does the Series.isnull() method do?","Easy","Detects missing (NA/NaN) values in the Series (alias for isna())."
"Series.notna()","What does the Series.notna() method do?","Easy","Detects existing (non-missing) values in the Series."
"Series.notnull()","What does the Series.notnull() method do?","Easy","Detects existing (non-missing) values in the Series (alias for notna())."
"Series.pad(*[, axis, inplace, limit, downcast])","What does the Series.pad() method do?","Medium","Fills missing (NA/NaN) values by propagating the last valid observation forward to the next valid one. (Deprecated)"
"Series.replace([to_replace, value, inplace, ...])","What does the Series.replace() method do?","Medium","Replaces values specified in 'to_replace' with a given 'value' in the Series."

"Series.plot([kind, ax, figsize, ....])","What does the Series.plot() method do?","Medium","Generates a plot for the Series, with customization options such as plot type, axis, and figure size."
"Series.plot.area([x, y, stacked])","What does the Series.plot.area() method do?","Medium","Generates a stacked area plot, displaying the cumulative sum of the Series' values."
"Series.plot.bar([x, y])","What does the Series.plot.bar() method do?","Medium","Generates a vertical bar plot of the Series' data."
"Series.plot.barh([x, y])","What does the Series.plot.barh() method do?","Medium","Generates a horizontal bar plot of the Series' data."
"Series.plot.box([by])","What does the Series.plot.box() method do?","Hard","Generates a box plot to visualize the distribution of the Series' data and highlight outliers."
"Series.plot.density([bw_method, ind])","What does the Series.plot.density() method do?","Hard","Generates a Kernel Density Estimate (KDE) plot using Gaussian kernels to estimate the distribution of the Series' data."
"Series.plot.hist([by, bins])","What does the Series.plot.hist() method do?","Medium","Generates a histogram of the Series' data with customizable bin sizes."
"Series.plot.kde([bw_method, ind])","What does the Series.plot.kde() method do?","Hard","Generates a Kernel Density Estimate (KDE) plot using Gaussian kernels to estimate the distribution of the Series' data."
"Series.plot.line([x, y])","What does the Series.plot.line() method do?","Medium","Generates a line plot for the Series, useful for visualizing trends over time."
"Series.plot.pie(**kwargs)","What does the Series.plot.pie() method do?","Medium","Generates a pie chart plot for the Series data."
"Series.hist([by, ax, grid, xlabelsize, ...])","What does the Series.hist() method do?","Medium","Generates a histogram of the Series using matplotlib, with options for customization such as axis, grid, and label size."

"Series.align(other[, join, axis, level, ...])","What does the Series.align() method do?","Medium","Aligns two Series (or other pandas objects) based on their indices, with an optional join method."
"Series.case_when(caselist)","What does the Series.case_when() method do?","Medium","Replaces values in the Series based on the conditions specified in the provided caselist."
"Series.drop([labels, axis, index, columns, ...])","What does the Series.drop() method do?","Medium","Removes specified labels (index or column) from the Series."
"Series.droplevel(level[, axis])","What does the Series.droplevel() method do?","Medium","Removes specified levels from the MultiIndex in the Series."
"Series.drop_duplicates(*[, keep, inplace, ...])","What does the Series.drop_duplicates() method do?","Medium","Removes duplicate values from the Series, optionally keeping the first or last occurrence."
"Series.duplicated([keep])","What does the Series.duplicated() method do?","Medium","Returns a boolean Series indicating duplicate values, with an option to mark the first or last duplicate."
"Series.equals(other)","What does the Series.equals() method do?","Medium","Compares two Series and returns True if they contain the same elements, otherwise False."
"Series.first(offset)","What does the Series.first() method do?","Hard","Selects the initial periods of time series data based on a date offset (deprecated)."
"Series.head([n])","What does the Series.head() method do?","Easy","Returns the first n rows of the Series."
"Series.idxmax([axis, skipna])","What does the Series.idxmax() method do?","Medium","Returns the index (row label) of the maximum value in the Series."
"Series.idxmin([axis, skipna])","What does the Series.idxmin() method do?","Medium","Returns the index (row label) of the minimum value in the Series."
"Series.isin(values)","What does the Series.isin() method do?","Medium","Returns a boolean Series indicating whether each element is contained in the specified set of values."
"Series.last(offset)","What does the Series.last() method do?","Hard","Selects the final periods of time series data based on a date offset (deprecated)."
"Series.reindex([index, axis, method, copy, ...])","What does the Series.reindex() method do?","Medium","Reindexes the Series to a new index, optionally filling missing values based on specified methods."
"Series.reindex_like(other[, method, copy, ...])","What does the Series.reindex_like() method do?","Medium","Reindexes the Series to match the index of another object."
"Series.rename([index, axis, copy, inplace, ...])","What does the Series.rename() method do?","Medium","Renames the Series' index labels or name."
"Series.rename_axis([mapper, index, axis, ...])","What does the Series.rename_axis() method do?","Medium","Sets the name of the axis for the Series' index or columns."
"Series.reset_index([level, drop, name, ...])","What does the Series.reset_index() method do?","Medium","Resets the index of the Series, optionally dropping it or retaining it as a column."
"Series.sample([n, frac, replace, weights, ...])","What does the Series.sample() method do?","Medium","Returns a random sample of items from the Series, with options for sample size, replacement, and weights."
"Series.set_axis(labels, *[, axis, copy])","What does the Series.set_axis() method do?","Medium","Sets the index (or axis) of the Series to the provided labels."
"Series.take(indices[, axis])","What does the Series.take() method do?","Medium","Returns elements from the Series using the specified positional indices along a given axis."
"Series.tail([n])","What does the Series.tail() method do?","Easy","Returns the last n rows of the Series."
"Series.truncate([before, after, axis, copy])","What does the Series.truncate() method do?","Medium","Truncates the Series by removing values before or after specified index labels."
"Series.where(cond[, other, inplace, axis, level])","What does the Series.where() method do?","Medium","Replaces values in the Series where the condition is False, with an optional replacement value."
"Series.mask(cond[, other, inplace, axis, level])","What does the Series.mask() method do?","Medium","Replaces values in the Series where the condition is True, with an optional replacement value."
"Series.add_prefix(prefix[, axis])","What does the Series.add_prefix() method do?","Medium","Adds a specified prefix to the labels of the Series."
"Series.add_suffix(suffix[, axis])","What does the Series.add_suffix() method do?","Medium","Adds a specified suffix to the labels of the Series."
"Series.filter([items, like, regex, axis])","What does the Series.filter() method do?","Medium","Filters the Series based on index labels or patterns (like, regex) specified."

"Series.argsort([axis, kind, order, stable])","What does the Series.argsort() method do?","Medium","Returns the integer indices that would sort the values in the Series."
"Series.argmin([axis, skipna])","What does the Series.argmin() method do?","Medium","Returns the integer position of the smallest value in the Series."
"Series.argmax([axis, skipna])","What does the Series.argmax() method do?","Medium","Returns the integer position of the largest value in the Series."
"Series.reorder_levels(order)","What does the Series.reorder_levels() method do?","Medium","Rearranges the index levels of the Series based on the input order."
"Series.sort_values(*[, axis, ascending, ...])","What does the Series.sort_values() method do?","Medium","Sorts the Series based on its values."
"Series.sort_index(*[, axis, level, ...])","What does the Series.sort_index() method do?","Medium","Sorts the Series based on its index labels."
"Series.swaplevel([i, j, copy])","What does the Series.swaplevel() method do?","Medium","Swaps levels i and j in a MultiIndex of the Series."
"Series.unstack([level, fill_value, sort])","What does the Series.unstack() method do?","Hard","Unstacks a MultiIndex Series into a DataFrame by pivoting the index."
"Series.explode([ignore_index])","What does the Series.explode() method do?","Medium","Transforms each element of a list-like object to its own row."
"Series.searchsorted(value[, side, sorter])","What does the Series.searchsorted() method do?","Medium","Finds indices where the specified value should be inserted to maintain order."
"Series.ravel([order])","What does the Series.ravel() method do?","Hard","(Deprecated) Returns the flattened underlying data as an ndarray or ExtensionArray."
"Series.repeat(repeats[, axis])","What does the Series.repeat() method do?","Medium","Repeats the elements of the Series a specified number of times."
"Series.squeeze([axis])","What does the Series.squeeze() method do?","Medium","Squeezes the 1-dimensional axis objects into scalars."
"Series.view([dtype])","What does the Series.view() method do?","Hard","(Deprecated) Creates a new view of the Series with the specified dtype."

"Series.to_pickle(path, *[, compression, ...])","What does the Series.to_pickle() method do?","Medium","Serializes (pickles) the Series object and writes it to a file at the specified path."
"Series.to_csv([path_or_buf, sep, na_rep, ...])","What does the Series.to_csv() method do?","Medium","Writes the Series object to a comma-separated values (CSV) file at the specified path."
"Series.to_dict(*[, into])","What does the Series.to_dict() method do?","Medium","Converts the Series object to a dictionary where the index labels are keys and the values are Series values."
"Series.to_excel(excel_writer, *[, ...])","What does the Series.to_excel() method do?","Medium","Writes the Series object to an Excel sheet using the specified writer."
"Series.to_frame([name])","What does the Series.to_frame() method do?","Easy","Converts the Series object to a DataFrame with an optional column name."
"Series.to_xarray()","What does the Series.to_xarray() method do?","Hard","Converts the Series object to an xarray object, which is suitable for multi-dimensional data."
"Series.to_hdf(path_or_buf, *, key[, mode, ...])","What does the Series.to_hdf() method do?","Hard","Writes the Series object to an HDF5 file, which is used for storing large datasets."
"Series.to_sql(name, con, *[, schema, ...])","What does the Series.to_sql() method do?","Medium","Writes the Series object to a SQL database, creating a new table with the specified name."
"Series.to_json([path_or_buf, orient, ...])","What does the Series.to_json() method do?","Medium","Converts the Series object to a JSON string or writes it to a JSON file."
"Series.to_string([buf, na_rep, ...])","What does the Series.to_string() method do?","Easy","Returns a string representation of the Series, optionally customizing missing value representation."
"Series.to_clipboard(*[, excel, sep])","What does the Series.to_clipboard() method do?","Medium","Copies the Series object to the system clipboard, enabling easy pasting into other applications."
"Series.to_latex([buf, columns, header, ...])","What does the Series.to_latex() method do?","Medium","Renders the Series object to a LaTeX-friendly table format."
"Series.to_markdown([buf, mode, index, ...])","What does the Series.to_markdown() method do?","Medium","Prints the Series object in a Markdown-friendly format."

"Series.sparse.npoints","What does the Series.sparse.npoints attribute represent?","Medium","It represents the number of non-fill_value points in a sparse Series."
"Series.sparse.density","What does the Series.sparse.density attribute represent?","Medium","It represents the percentage of non-fill_value points in the Series, expressed as a decimal."
"Series.sparse.fill_value","What does the Series.sparse.fill_value attribute represent?","Easy","It represents the value used for missing or not stored elements in a sparse Series."
"Series.sparse.sp_values","What does the Series.sparse.sp_values attribute contain?","Medium","It contains an ndarray that holds the non-fill_value values of the sparse Series."
"Series.sparse.from_coo(A[, dense_index])","What does the Series.sparse.from_coo() method do?","Hard","It creates a sparse Series from a scipy.sparse.coo_matrix, optionally specifying a dense index."
"Series.sparse.to_coo([row_levels, ...])","What does the Series.sparse.to_coo() method do?","Hard","It converts a sparse Series with MultiIndex into a scipy.sparse.coo_matrix."

"Series.str.capitalize()","What does the Series.str.capitalize() method do?","Easy","It converts each string in the Series to be capitalized, where the first letter is uppercase and the rest are lowercase."
"Series.str.casefold()","What does the Series.str.casefold() method do?","Medium","It converts each string in the Series to lowercase using casefolding, which is more aggressive than simple lowercasing, handling characters like 'ß'."
"Series.str.cat([others, sep, na_rep, join])","What does the Series.str.cat() method do?","Medium","It concatenates strings in the Series with a given separator, optionally including values from other Series or handling missing values."
"Series.str.center(width[, fillchar])","What does the Series.str.center() method do?","Medium","It pads the strings in the Series to a specified width, centering them and optionally filling the padding with a specified character."
"Series.str.contains(pat[, case, flags, na, ...])","What does the Series.str.contains() method do?","Medium","It checks whether each string in the Series contains the given pattern or regular expression."
"Series.str.count(pat[, flags])","What does the Series.str.count() method do?","Medium","It counts the occurrences of a given pattern or regular expression in each string of the Series."
"Series.str.decode(encoding[, errors])","What does the Series.str.decode() method do?","Hard","It decodes the strings in the Series using the specified encoding, handling errors according to the specified method."
"Series.str.encode(encoding[, errors])","What does the Series.str.encode() method do?","Hard","It encodes the strings in the Series using the specified encoding, handling errors according to the specified method."
"Series.str.endswith(pat[, na])","What does the Series.str.endswith() method do?","Medium","It checks whether the end of each string in the Series matches a given pattern."
"Series.str.extract(pat[, flags, expand])","What does the Series.str.extract() method do?","Medium","It extracts capture groups from each string in the Series using the provided regular expression pattern."
"Series.str.extractall(pat[, flags])","What does the Series.str.extractall() method do?","Hard","It extracts all capture groups from each string in the Series using the provided regular expression pattern."
"Series.str.find(sub[, start, end])","What does the Series.str.find() method do?","Medium","It returns the lowest index of the substring within each string in the Series, or -1 if not found."
"Series.str.findall(pat[, flags])","What does the Series.str.findall() method do?","Medium","It finds all occurrences of a given pattern or regular expression in each string of the Series."
"Series.str.fullmatch(pat[, case, flags, na])","What does the Series.str.fullmatch() method do?","Hard","It checks if each string in the Series completely matches the specified regular expression pattern."
"Series.str.get(i)","What does the Series.str.get() method do?","Medium","It extracts the element at the specified index from each string in the Series."
"Series.str.index(sub[, start, end])","What does the Series.str.index() method do?","Medium","It returns the lowest index of the substring within each string in the Series, similar to find, but raises a ValueError if not found."
"Series.str.join(sep)","What does the Series.str.join() method do?","Medium","It joins elements in each string in the Series with a given separator."
"Series.str.len()","What does the Series.str.len() method do?","Easy","It returns the length of each string in the Series."
"Series.str.ljust(width[, fillchar])","What does the Series.str.ljust() method do?","Medium","It pads the right side of each string in the Series to a specified width, optionally filling with a specified character."
"Series.str.lower()","What does the Series.str.lower() method do?","Easy","It converts all characters in each string of the Series to lowercase."
"Series.str.lstrip([to_strip])","What does the Series.str.lstrip() method do?","Medium","It removes leading characters (specified or default whitespace) from each string in the Series."
"Series.str.match(pat[, case, flags, na])","What does the Series.str.match() method do?","Medium","It checks if each string in the Series starts with the specified regular expression pattern."
"Series.str.normalize(form)","What does the Series.str.normalize() method do?","Hard","It returns the Unicode normalized form for the strings in the Series, useful for text comparison across languages."
"Series.str.pad(width[, side, fillchar])","What does the Series.str.pad() method do?","Medium","It pads each string in the Series to the specified width, allowing padding on either side with a specified character."
"Series.str.partition([sep, expand])","What does the Series.str.partition() method do?","Medium","It splits each string at the first occurrence of the specified separator, returning a tuple of three strings."
"Series.str.removeprefix(prefix)","What does the Series.str.removeprefix() method do?","Medium","It removes a specified prefix from each string in the Series if it exists."
"Series.str.removesuffix(suffix)","What does the Series.str.removesuffix() method do?","Medium","It removes a specified suffix from each string in the Series if it exists."
"Series.str.repeat(repeats)","What does the Series.str.repeat() method do?","Medium","It repeats each string in the Series a specified number of times."
"Series.str.replace(pat, repl[, n, case, ...])","What does the Series.str.replace() method do?","Medium","It replaces occurrences of a pattern or regular expression in each string of the Series with a specified replacement string."
"Series.str.rfind(sub[, start, end])","What does the Series.str.rfind() method do?","Medium","It returns the highest index where the substring is found in each string in the Series."
"Series.str.rindex(sub[, start, end])","What does the Series.str.rindex() method do?","Medium","It returns the highest index where the substring is found in each string, similar to rfind, but raises an error if not found."
"Series.str.rjust(width[, fillchar])","What does the Series.str.rjust() method do?","Medium","It pads the left side of each string in the Series to a specified width, optionally filling with a specified character."
"Series.str.rpartition([sep, expand])","What does the Series.str.rpartition() method do?","Medium","It splits each string at the last occurrence of the specified separator, returning a tuple of three strings."
"Series.str.rstrip([to_strip])","What does the Series.str.rstrip() method do?","Medium","It removes trailing characters (specified or default whitespace) from each string in the Series."
"Series.str.slice([start, stop, step])","What does the Series.str.slice() method do?","Medium","It slices substrings from each string in the Series based on the specified start, stop, and step parameters."
"Series.str.slice_replace([start, stop, repl])","What does the Series.str.slice_replace() method do?","Medium","It replaces a substring within each string in the Series, given a start and stop position."
"Series.str.split([pat, n, expand, regex])","What does the Series.str.split() method do?","Medium","It splits each string in the Series around the specified separator or delimiter."
"Series.str.rsplit([pat, n, expand])","What does the Series.str.rsplit() method do?","Medium","It splits each string in the Series around the specified separator, starting from the right."
"Series.str.startswith(pat[, na])","What does the Series.str.startswith() method do?","Medium","It checks whether each string in the Series starts with the specified pattern."
"Series.str.strip([to_strip])","What does the Series.str.strip() method do?","Medium","It removes leading and trailing characters (specified or default whitespace) from each string in the Series."
"Series.str.swapcase()","What does the Series.str.swapcase() method do?","Medium","It converts lowercase characters to uppercase and vice versa in each string in the Series."
"Series.str.title()","What does the Series.str.title() method do?","Easy","It converts each string in the Series to titlecase, where the first letter of each word is capitalized."
"Series.str.translate(table)","What does the Series.str.translate() method do?","Hard","It maps each character in the string through a specified translation table."
"Series.str.upper()","What does the Series.str.upper() method do?","Easy","It converts all characters in each string of the Series to uppercase."
"Series.str.wrap(width, **kwargs)","What does the Series.str.wrap() method do?","Hard","It wraps each string in the Series at the specified line width."
"Series.str.zfill(width)","What does the Series.str.zfill() method do?","Medium","It pads each string in the Series by prepending '0' characters to reach the specified width."
"Series.str.isalnum()","What does the Series.str.isalnum() method do?","Medium","It checks whether all characters in each string of the Series are alphanumeric."
"Series.str.isalpha()","What does the Series.str.isalpha() method do?","Medium","It checks whether all characters in each string of the Series are alphabetic."
"Series.str.isdigit()","What does the Series.str.isdigit() method do?","Medium","It checks whether all characters in each string of the Series are digits."
"Series.str.isspace()","What does the Series.str.isspace() method do?","Medium","It checks whether all characters in each string of the Series are whitespace."
"Series.str.islower()","What does the Series.str.islower() method do?","Medium","It checks whether all characters in each string of the Series are lowercase."
"Series.str.isupper()","What does the Series.str.isupper() method do?","Medium","It checks whether all characters in each string of the Series are uppercase."
"Series.str.istitle()","What does the Series.str.istitle() method do?","Medium","It checks whether each string in the Series is titlecased."
"Series.str.isnumeric()","What does the Series.str.isnumeric() method do?","Medium","It checks whether all characters in each string of the Series are numeric."
"Series.str.isdecimal()","What does the Series.str.isdecimal() method do?","Medium","It checks whether all characters in each string of the Series are decimal."
"Series.str.get_dummies([sep])","What does the Series.str.get_dummies() method do?","Hard","It creates a DataFrame of dummy/indicator variables for each unique value in the Series."
"Series.struct.dtypes","What does the Series.struct.dtypes method do?","Medium","It returns the dtype object for each child field of the struct, providing information about the data type of each element within the struct."
"Series.struct.field(name_or_index)","What does the Series.struct.field(name_or_index) method do?","Medium","It extracts a specific child field from the struct by name or index and returns it as a Series."
"Series.struct.explode()","What does the Series.struct.explode() method do?","Hard","It extracts all child fields from a struct and returns them as a DataFrame, allowing access to the individual elements within the struct."
"Series.asfreq(freq[, method, how, ...])","What does the Series.asfreq(freq) method do in pandas?","Medium","It converts a time series to a specified frequency, allowing for resampling or changing the frequency of time-based data."
"Series.asof(where[, subset])","What is the purpose of the Series.asof(where) method?","Medium","It returns the last valid value before a specific point (where) in the time series, excluding any NaNs before the given point."
"Series.shift([periods, freq, axis, ...])","What does the Series.shift() method do in pandas?","Medium","It shifts the time series by a specified number of periods, with the option to apply a time frequency as well."
"Series.first_valid_index()","What does the Series.first_valid_index() method return?","Medium","It returns the index of the first non-NA value in the time series, or None if no valid values are found."
"Series.last_valid_index()","What does the Series.last_valid_index() method return?","Medium","It returns the index of the last non-NA value in the time series, or None if no valid values are found."
"Series.resample(rule[, axis, closed, label, ...])","What is the Series.resample(rule) method used for?","Hard","It resamples time-series data according to a given frequency rule (such as 'D' for daily or 'M' for monthly), and can aggregate data accordingly."
"Series.tz_convert(tz[, axis, level, copy])","What does the Series.tz_convert(tz) method do?","Medium","It converts a time-zone aware time series from one time zone to another, preserving the time information in the target zone."
"Series.tz_localize(tz[, axis, level, copy, ...])","What is the purpose of the Series.tz_localize(tz) method?","Medium","It localizes a tz-naive time series by assigning it a time zone, making it tz-aware."
"Series.at_time(time[, asof, axis])","What does the Series.at_time(time) method do?","Medium","It selects the values from the time series at a specific time of day (e.g., 9:30AM), which is useful for time-based indexing."
"Series.between_time(start_time, end_time[, ...])","What is the function of the Series.between_time() method?","Medium","It selects the values from the time series that occur between two specific times of the day (e.g., 9:00-9:30 AM)."